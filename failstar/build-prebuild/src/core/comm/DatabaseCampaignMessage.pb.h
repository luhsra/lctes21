// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DatabaseCampaignMessage.proto

#ifndef PROTOBUF_INCLUDED_DatabaseCampaignMessage_2eproto
#define PROTOBUF_INCLUDED_DatabaseCampaignMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "InjectionPointStepsMessage.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_DatabaseCampaignMessage_2eproto 

namespace protobuf_DatabaseCampaignMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_DatabaseCampaignMessage_2eproto
class DatabaseCampaignMessage;
class DatabaseCampaignMessageDefaultTypeInternal;
extern DatabaseCampaignMessageDefaultTypeInternal _DatabaseCampaignMessage_default_instance_;
class DatabaseExperimentMessage;
class DatabaseExperimentMessageDefaultTypeInternal;
extern DatabaseExperimentMessageDefaultTypeInternal _DatabaseExperimentMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::DatabaseCampaignMessage* Arena::CreateMaybeMessage<::DatabaseCampaignMessage>(Arena*);
template<> ::DatabaseExperimentMessage* Arena::CreateMaybeMessage<::DatabaseExperimentMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

enum DatabaseCampaignMessage_RegisterInjectionMode {
  DatabaseCampaignMessage_RegisterInjectionMode_OFF = 0,
  DatabaseCampaignMessage_RegisterInjectionMode_AUTO = 1,
  DatabaseCampaignMessage_RegisterInjectionMode_FORCE = 2,
  DatabaseCampaignMessage_RegisterInjectionMode_RANDOMJUMP = 3
};
bool DatabaseCampaignMessage_RegisterInjectionMode_IsValid(int value);
const DatabaseCampaignMessage_RegisterInjectionMode DatabaseCampaignMessage_RegisterInjectionMode_RegisterInjectionMode_MIN = DatabaseCampaignMessage_RegisterInjectionMode_OFF;
const DatabaseCampaignMessage_RegisterInjectionMode DatabaseCampaignMessage_RegisterInjectionMode_RegisterInjectionMode_MAX = DatabaseCampaignMessage_RegisterInjectionMode_RANDOMJUMP;
const int DatabaseCampaignMessage_RegisterInjectionMode_RegisterInjectionMode_ARRAYSIZE = DatabaseCampaignMessage_RegisterInjectionMode_RegisterInjectionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatabaseCampaignMessage_RegisterInjectionMode_descriptor();
inline const ::std::string& DatabaseCampaignMessage_RegisterInjectionMode_Name(DatabaseCampaignMessage_RegisterInjectionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatabaseCampaignMessage_RegisterInjectionMode_descriptor(), value);
}
inline bool DatabaseCampaignMessage_RegisterInjectionMode_Parse(
    const ::std::string& name, DatabaseCampaignMessage_RegisterInjectionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatabaseCampaignMessage_RegisterInjectionMode>(
    DatabaseCampaignMessage_RegisterInjectionMode_descriptor(), name, value);
}
// ===================================================================

class DatabaseCampaignMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DatabaseCampaignMessage) */ {
 public:
  DatabaseCampaignMessage();
  virtual ~DatabaseCampaignMessage();

  DatabaseCampaignMessage(const DatabaseCampaignMessage& from);

  inline DatabaseCampaignMessage& operator=(const DatabaseCampaignMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseCampaignMessage(DatabaseCampaignMessage&& from) noexcept
    : DatabaseCampaignMessage() {
    *this = ::std::move(from);
  }

  inline DatabaseCampaignMessage& operator=(DatabaseCampaignMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseCampaignMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseCampaignMessage* internal_default_instance() {
    return reinterpret_cast<const DatabaseCampaignMessage*>(
               &_DatabaseCampaignMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DatabaseCampaignMessage* other);
  friend void swap(DatabaseCampaignMessage& a, DatabaseCampaignMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseCampaignMessage* New() const final {
    return CreateMaybeMessage<DatabaseCampaignMessage>(NULL);
  }

  DatabaseCampaignMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseCampaignMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DatabaseCampaignMessage& from);
  void MergeFrom(const DatabaseCampaignMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseCampaignMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DatabaseCampaignMessage_RegisterInjectionMode RegisterInjectionMode;
  static const RegisterInjectionMode OFF =
    DatabaseCampaignMessage_RegisterInjectionMode_OFF;
  static const RegisterInjectionMode AUTO =
    DatabaseCampaignMessage_RegisterInjectionMode_AUTO;
  static const RegisterInjectionMode FORCE =
    DatabaseCampaignMessage_RegisterInjectionMode_FORCE;
  static const RegisterInjectionMode RANDOMJUMP =
    DatabaseCampaignMessage_RegisterInjectionMode_RANDOMJUMP;
  static inline bool RegisterInjectionMode_IsValid(int value) {
    return DatabaseCampaignMessage_RegisterInjectionMode_IsValid(value);
  }
  static const RegisterInjectionMode RegisterInjectionMode_MIN =
    DatabaseCampaignMessage_RegisterInjectionMode_RegisterInjectionMode_MIN;
  static const RegisterInjectionMode RegisterInjectionMode_MAX =
    DatabaseCampaignMessage_RegisterInjectionMode_RegisterInjectionMode_MAX;
  static const int RegisterInjectionMode_ARRAYSIZE =
    DatabaseCampaignMessage_RegisterInjectionMode_RegisterInjectionMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RegisterInjectionMode_descriptor() {
    return DatabaseCampaignMessage_RegisterInjectionMode_descriptor();
  }
  static inline const ::std::string& RegisterInjectionMode_Name(RegisterInjectionMode value) {
    return DatabaseCampaignMessage_RegisterInjectionMode_Name(value);
  }
  static inline bool RegisterInjectionMode_Parse(const ::std::string& name,
      RegisterInjectionMode* value) {
    return DatabaseCampaignMessage_RegisterInjectionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string variant = 8 [(.sql_ignore) = true];
  bool has_variant() const;
  void clear_variant();
  static const int kVariantFieldNumber = 8;
  const ::std::string& variant() const;
  void set_variant(const ::std::string& value);
  #if LANG_CXX11
  void set_variant(::std::string&& value);
  #endif
  void set_variant(const char* value);
  void set_variant(const char* value, size_t size);
  ::std::string* mutable_variant();
  ::std::string* release_variant();
  void set_allocated_variant(::std::string* variant);

  // required string benchmark = 9 [(.sql_ignore) = true];
  bool has_benchmark() const;
  void clear_benchmark();
  static const int kBenchmarkFieldNumber = 9;
  const ::std::string& benchmark() const;
  void set_benchmark(const ::std::string& value);
  #if LANG_CXX11
  void set_benchmark(::std::string&& value);
  #endif
  void set_benchmark(const char* value);
  void set_benchmark(const char* value, size_t size);
  ::std::string* mutable_benchmark();
  ::std::string* release_benchmark();
  void set_allocated_benchmark(::std::string* benchmark);

  // required .InjectionPointMessage injection_point = 10 [(.sql_ignore) = true];
  bool has_injection_point() const;
  void clear_injection_point();
  static const int kInjectionPointFieldNumber = 10;
  private:
  const ::InjectionPointMessage& _internal_injection_point() const;
  public:
  const ::InjectionPointMessage& injection_point() const;
  ::InjectionPointMessage* release_injection_point();
  ::InjectionPointMessage* mutable_injection_point();
  void set_allocated_injection_point(::InjectionPointMessage* injection_point);

  // required uint32 pilot_id = 1 [(.sql_primary_key) = true];
  bool has_pilot_id() const;
  void clear_pilot_id();
  static const int kPilotIdFieldNumber = 1;
  ::google::protobuf::uint32 pilot_id() const;
  void set_pilot_id(::google::protobuf::uint32 value);

  // required uint32 injection_instr = 4 [(.sql_ignore) = true];
  bool has_injection_instr() const;
  void clear_injection_instr();
  static const int kInjectionInstrFieldNumber = 4;
  ::google::protobuf::uint32 injection_instr() const;
  void set_injection_instr(::google::protobuf::uint32 value);

  // optional uint32 injection_instr_absolute = 5 [(.sql_ignore) = true];
  bool has_injection_instr_absolute() const;
  void clear_injection_instr_absolute();
  static const int kInjectionInstrAbsoluteFieldNumber = 5;
  ::google::protobuf::uint32 injection_instr_absolute() const;
  void set_injection_instr_absolute(::google::protobuf::uint32 value);

  // required uint32 data_address = 6 [(.sql_ignore) = true];
  bool has_data_address() const;
  void clear_data_address();
  static const int kDataAddressFieldNumber = 6;
  ::google::protobuf::uint32 data_address() const;
  void set_data_address(::google::protobuf::uint32 value);

  // required uint32 data_width = 7 [(.sql_ignore) = true];
  bool has_data_width() const;
  void clear_data_width();
  static const int kDataWidthFieldNumber = 7;
  ::google::protobuf::uint32 data_width() const;
  void set_data_width(::google::protobuf::uint32 value);

  // required bool inject_bursts = 11 [default = false];
  bool has_inject_bursts() const;
  void clear_inject_bursts();
  static const int kInjectBurstsFieldNumber = 11;
  bool inject_bursts() const;
  void set_inject_bursts(bool value);

  // optional .DatabaseCampaignMessage.RegisterInjectionMode register_injection_mode = 12 [default = OFF];
  bool has_register_injection_mode() const;
  void clear_register_injection_mode();
  static const int kRegisterInjectionModeFieldNumber = 12;
  ::DatabaseCampaignMessage_RegisterInjectionMode register_injection_mode() const;
  void set_register_injection_mode(::DatabaseCampaignMessage_RegisterInjectionMode value);

  // @@protoc_insertion_point(class_scope:DatabaseCampaignMessage)
 private:
  void set_has_pilot_id();
  void clear_has_pilot_id();
  void set_has_injection_instr();
  void clear_has_injection_instr();
  void set_has_injection_instr_absolute();
  void clear_has_injection_instr_absolute();
  void set_has_data_address();
  void clear_has_data_address();
  void set_has_data_width();
  void clear_has_data_width();
  void set_has_variant();
  void clear_has_variant();
  void set_has_benchmark();
  void clear_has_benchmark();
  void set_has_injection_point();
  void clear_has_injection_point();
  void set_has_inject_bursts();
  void clear_has_inject_bursts();
  void set_has_register_injection_mode();
  void clear_has_register_injection_mode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr variant_;
  ::google::protobuf::internal::ArenaStringPtr benchmark_;
  ::InjectionPointMessage* injection_point_;
  ::google::protobuf::uint32 pilot_id_;
  ::google::protobuf::uint32 injection_instr_;
  ::google::protobuf::uint32 injection_instr_absolute_;
  ::google::protobuf::uint32 data_address_;
  ::google::protobuf::uint32 data_width_;
  bool inject_bursts_;
  int register_injection_mode_;
  friend struct ::protobuf_DatabaseCampaignMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatabaseExperimentMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DatabaseExperimentMessage) */ {
 public:
  DatabaseExperimentMessage();
  virtual ~DatabaseExperimentMessage();

  DatabaseExperimentMessage(const DatabaseExperimentMessage& from);

  inline DatabaseExperimentMessage& operator=(const DatabaseExperimentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseExperimentMessage(DatabaseExperimentMessage&& from) noexcept
    : DatabaseExperimentMessage() {
    *this = ::std::move(from);
  }

  inline DatabaseExperimentMessage& operator=(DatabaseExperimentMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseExperimentMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseExperimentMessage* internal_default_instance() {
    return reinterpret_cast<const DatabaseExperimentMessage*>(
               &_DatabaseExperimentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DatabaseExperimentMessage* other);
  friend void swap(DatabaseExperimentMessage& a, DatabaseExperimentMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseExperimentMessage* New() const final {
    return CreateMaybeMessage<DatabaseExperimentMessage>(NULL);
  }

  DatabaseExperimentMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseExperimentMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DatabaseExperimentMessage& from);
  void MergeFrom(const DatabaseExperimentMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseExperimentMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 bitoffset = 1 [(.sql_primary_key) = true];
  bool has_bitoffset() const;
  void clear_bitoffset();
  static const int kBitoffsetFieldNumber = 1;
  ::google::protobuf::uint32 bitoffset() const;
  void set_bitoffset(::google::protobuf::uint32 value);

  // required uint32 original_value = 2;
  bool has_original_value() const;
  void clear_original_value();
  static const int kOriginalValueFieldNumber = 2;
  ::google::protobuf::uint32 original_value() const;
  void set_original_value(::google::protobuf::uint32 value);

  // required uint32 injection_width = 3;
  bool has_injection_width() const;
  void clear_injection_width();
  static const int kInjectionWidthFieldNumber = 3;
  ::google::protobuf::uint32 injection_width() const;
  void set_injection_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DatabaseExperimentMessage)
 private:
  void set_has_bitoffset();
  void clear_has_bitoffset();
  void set_has_original_value();
  void clear_has_original_value();
  void set_has_injection_width();
  void clear_has_injection_width();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 bitoffset_;
  ::google::protobuf::uint32 original_value_;
  ::google::protobuf::uint32 injection_width_;
  friend struct ::protobuf_DatabaseCampaignMessage_2eproto::TableStruct;
};
// ===================================================================

static const int kSqlPrimaryKeyFieldNumber = 32382;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  sql_primary_key;
static const int kSqlIgnoreFieldNumber = 32383;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  sql_ignore;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DatabaseCampaignMessage

// required uint32 pilot_id = 1 [(.sql_primary_key) = true];
inline bool DatabaseCampaignMessage::has_pilot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatabaseCampaignMessage::set_has_pilot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatabaseCampaignMessage::clear_has_pilot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatabaseCampaignMessage::clear_pilot_id() {
  pilot_id_ = 0u;
  clear_has_pilot_id();
}
inline ::google::protobuf::uint32 DatabaseCampaignMessage::pilot_id() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.pilot_id)
  return pilot_id_;
}
inline void DatabaseCampaignMessage::set_pilot_id(::google::protobuf::uint32 value) {
  set_has_pilot_id();
  pilot_id_ = value;
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.pilot_id)
}

// required uint32 injection_instr = 4 [(.sql_ignore) = true];
inline bool DatabaseCampaignMessage::has_injection_instr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatabaseCampaignMessage::set_has_injection_instr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatabaseCampaignMessage::clear_has_injection_instr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatabaseCampaignMessage::clear_injection_instr() {
  injection_instr_ = 0u;
  clear_has_injection_instr();
}
inline ::google::protobuf::uint32 DatabaseCampaignMessage::injection_instr() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.injection_instr)
  return injection_instr_;
}
inline void DatabaseCampaignMessage::set_injection_instr(::google::protobuf::uint32 value) {
  set_has_injection_instr();
  injection_instr_ = value;
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.injection_instr)
}

// optional uint32 injection_instr_absolute = 5 [(.sql_ignore) = true];
inline bool DatabaseCampaignMessage::has_injection_instr_absolute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DatabaseCampaignMessage::set_has_injection_instr_absolute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DatabaseCampaignMessage::clear_has_injection_instr_absolute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DatabaseCampaignMessage::clear_injection_instr_absolute() {
  injection_instr_absolute_ = 0u;
  clear_has_injection_instr_absolute();
}
inline ::google::protobuf::uint32 DatabaseCampaignMessage::injection_instr_absolute() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.injection_instr_absolute)
  return injection_instr_absolute_;
}
inline void DatabaseCampaignMessage::set_injection_instr_absolute(::google::protobuf::uint32 value) {
  set_has_injection_instr_absolute();
  injection_instr_absolute_ = value;
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.injection_instr_absolute)
}

// required uint32 data_address = 6 [(.sql_ignore) = true];
inline bool DatabaseCampaignMessage::has_data_address() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DatabaseCampaignMessage::set_has_data_address() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DatabaseCampaignMessage::clear_has_data_address() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DatabaseCampaignMessage::clear_data_address() {
  data_address_ = 0u;
  clear_has_data_address();
}
inline ::google::protobuf::uint32 DatabaseCampaignMessage::data_address() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.data_address)
  return data_address_;
}
inline void DatabaseCampaignMessage::set_data_address(::google::protobuf::uint32 value) {
  set_has_data_address();
  data_address_ = value;
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.data_address)
}

// required uint32 data_width = 7 [(.sql_ignore) = true];
inline bool DatabaseCampaignMessage::has_data_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DatabaseCampaignMessage::set_has_data_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DatabaseCampaignMessage::clear_has_data_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DatabaseCampaignMessage::clear_data_width() {
  data_width_ = 0u;
  clear_has_data_width();
}
inline ::google::protobuf::uint32 DatabaseCampaignMessage::data_width() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.data_width)
  return data_width_;
}
inline void DatabaseCampaignMessage::set_data_width(::google::protobuf::uint32 value) {
  set_has_data_width();
  data_width_ = value;
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.data_width)
}

// required string variant = 8 [(.sql_ignore) = true];
inline bool DatabaseCampaignMessage::has_variant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatabaseCampaignMessage::set_has_variant() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatabaseCampaignMessage::clear_has_variant() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatabaseCampaignMessage::clear_variant() {
  variant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_variant();
}
inline const ::std::string& DatabaseCampaignMessage::variant() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.variant)
  return variant_.GetNoArena();
}
inline void DatabaseCampaignMessage::set_variant(const ::std::string& value) {
  set_has_variant();
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.variant)
}
#if LANG_CXX11
inline void DatabaseCampaignMessage::set_variant(::std::string&& value) {
  set_has_variant();
  variant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DatabaseCampaignMessage.variant)
}
#endif
inline void DatabaseCampaignMessage::set_variant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_variant();
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DatabaseCampaignMessage.variant)
}
inline void DatabaseCampaignMessage::set_variant(const char* value, size_t size) {
  set_has_variant();
  variant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DatabaseCampaignMessage.variant)
}
inline ::std::string* DatabaseCampaignMessage::mutable_variant() {
  set_has_variant();
  // @@protoc_insertion_point(field_mutable:DatabaseCampaignMessage.variant)
  return variant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseCampaignMessage::release_variant() {
  // @@protoc_insertion_point(field_release:DatabaseCampaignMessage.variant)
  if (!has_variant()) {
    return NULL;
  }
  clear_has_variant();
  return variant_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseCampaignMessage::set_allocated_variant(::std::string* variant) {
  if (variant != NULL) {
    set_has_variant();
  } else {
    clear_has_variant();
  }
  variant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), variant);
  // @@protoc_insertion_point(field_set_allocated:DatabaseCampaignMessage.variant)
}

// required string benchmark = 9 [(.sql_ignore) = true];
inline bool DatabaseCampaignMessage::has_benchmark() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatabaseCampaignMessage::set_has_benchmark() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatabaseCampaignMessage::clear_has_benchmark() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatabaseCampaignMessage::clear_benchmark() {
  benchmark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_benchmark();
}
inline const ::std::string& DatabaseCampaignMessage::benchmark() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.benchmark)
  return benchmark_.GetNoArena();
}
inline void DatabaseCampaignMessage::set_benchmark(const ::std::string& value) {
  set_has_benchmark();
  benchmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.benchmark)
}
#if LANG_CXX11
inline void DatabaseCampaignMessage::set_benchmark(::std::string&& value) {
  set_has_benchmark();
  benchmark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DatabaseCampaignMessage.benchmark)
}
#endif
inline void DatabaseCampaignMessage::set_benchmark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_benchmark();
  benchmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DatabaseCampaignMessage.benchmark)
}
inline void DatabaseCampaignMessage::set_benchmark(const char* value, size_t size) {
  set_has_benchmark();
  benchmark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DatabaseCampaignMessage.benchmark)
}
inline ::std::string* DatabaseCampaignMessage::mutable_benchmark() {
  set_has_benchmark();
  // @@protoc_insertion_point(field_mutable:DatabaseCampaignMessage.benchmark)
  return benchmark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseCampaignMessage::release_benchmark() {
  // @@protoc_insertion_point(field_release:DatabaseCampaignMessage.benchmark)
  if (!has_benchmark()) {
    return NULL;
  }
  clear_has_benchmark();
  return benchmark_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseCampaignMessage::set_allocated_benchmark(::std::string* benchmark) {
  if (benchmark != NULL) {
    set_has_benchmark();
  } else {
    clear_has_benchmark();
  }
  benchmark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), benchmark);
  // @@protoc_insertion_point(field_set_allocated:DatabaseCampaignMessage.benchmark)
}

// required .InjectionPointMessage injection_point = 10 [(.sql_ignore) = true];
inline bool DatabaseCampaignMessage::has_injection_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatabaseCampaignMessage::set_has_injection_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatabaseCampaignMessage::clear_has_injection_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::InjectionPointMessage& DatabaseCampaignMessage::_internal_injection_point() const {
  return *injection_point_;
}
inline const ::InjectionPointMessage& DatabaseCampaignMessage::injection_point() const {
  const ::InjectionPointMessage* p = injection_point_;
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.injection_point)
  return p != NULL ? *p : *reinterpret_cast<const ::InjectionPointMessage*>(
      &::_InjectionPointMessage_default_instance_);
}
inline ::InjectionPointMessage* DatabaseCampaignMessage::release_injection_point() {
  // @@protoc_insertion_point(field_release:DatabaseCampaignMessage.injection_point)
  clear_has_injection_point();
  ::InjectionPointMessage* temp = injection_point_;
  injection_point_ = NULL;
  return temp;
}
inline ::InjectionPointMessage* DatabaseCampaignMessage::mutable_injection_point() {
  set_has_injection_point();
  if (injection_point_ == NULL) {
    auto* p = CreateMaybeMessage<::InjectionPointMessage>(GetArenaNoVirtual());
    injection_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:DatabaseCampaignMessage.injection_point)
  return injection_point_;
}
inline void DatabaseCampaignMessage::set_allocated_injection_point(::InjectionPointMessage* injection_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(injection_point_);
  }
  if (injection_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      injection_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, injection_point, submessage_arena);
    }
    set_has_injection_point();
  } else {
    clear_has_injection_point();
  }
  injection_point_ = injection_point;
  // @@protoc_insertion_point(field_set_allocated:DatabaseCampaignMessage.injection_point)
}

// required bool inject_bursts = 11 [default = false];
inline bool DatabaseCampaignMessage::has_inject_bursts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DatabaseCampaignMessage::set_has_inject_bursts() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DatabaseCampaignMessage::clear_has_inject_bursts() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DatabaseCampaignMessage::clear_inject_bursts() {
  inject_bursts_ = false;
  clear_has_inject_bursts();
}
inline bool DatabaseCampaignMessage::inject_bursts() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.inject_bursts)
  return inject_bursts_;
}
inline void DatabaseCampaignMessage::set_inject_bursts(bool value) {
  set_has_inject_bursts();
  inject_bursts_ = value;
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.inject_bursts)
}

// optional .DatabaseCampaignMessage.RegisterInjectionMode register_injection_mode = 12 [default = OFF];
inline bool DatabaseCampaignMessage::has_register_injection_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DatabaseCampaignMessage::set_has_register_injection_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DatabaseCampaignMessage::clear_has_register_injection_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DatabaseCampaignMessage::clear_register_injection_mode() {
  register_injection_mode_ = 0;
  clear_has_register_injection_mode();
}
inline ::DatabaseCampaignMessage_RegisterInjectionMode DatabaseCampaignMessage::register_injection_mode() const {
  // @@protoc_insertion_point(field_get:DatabaseCampaignMessage.register_injection_mode)
  return static_cast< ::DatabaseCampaignMessage_RegisterInjectionMode >(register_injection_mode_);
}
inline void DatabaseCampaignMessage::set_register_injection_mode(::DatabaseCampaignMessage_RegisterInjectionMode value) {
  assert(::DatabaseCampaignMessage_RegisterInjectionMode_IsValid(value));
  set_has_register_injection_mode();
  register_injection_mode_ = value;
  // @@protoc_insertion_point(field_set:DatabaseCampaignMessage.register_injection_mode)
}

// -------------------------------------------------------------------

// DatabaseExperimentMessage

// required uint32 bitoffset = 1 [(.sql_primary_key) = true];
inline bool DatabaseExperimentMessage::has_bitoffset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatabaseExperimentMessage::set_has_bitoffset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatabaseExperimentMessage::clear_has_bitoffset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatabaseExperimentMessage::clear_bitoffset() {
  bitoffset_ = 0u;
  clear_has_bitoffset();
}
inline ::google::protobuf::uint32 DatabaseExperimentMessage::bitoffset() const {
  // @@protoc_insertion_point(field_get:DatabaseExperimentMessage.bitoffset)
  return bitoffset_;
}
inline void DatabaseExperimentMessage::set_bitoffset(::google::protobuf::uint32 value) {
  set_has_bitoffset();
  bitoffset_ = value;
  // @@protoc_insertion_point(field_set:DatabaseExperimentMessage.bitoffset)
}

// required uint32 original_value = 2;
inline bool DatabaseExperimentMessage::has_original_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatabaseExperimentMessage::set_has_original_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatabaseExperimentMessage::clear_has_original_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatabaseExperimentMessage::clear_original_value() {
  original_value_ = 0u;
  clear_has_original_value();
}
inline ::google::protobuf::uint32 DatabaseExperimentMessage::original_value() const {
  // @@protoc_insertion_point(field_get:DatabaseExperimentMessage.original_value)
  return original_value_;
}
inline void DatabaseExperimentMessage::set_original_value(::google::protobuf::uint32 value) {
  set_has_original_value();
  original_value_ = value;
  // @@protoc_insertion_point(field_set:DatabaseExperimentMessage.original_value)
}

// required uint32 injection_width = 3;
inline bool DatabaseExperimentMessage::has_injection_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatabaseExperimentMessage::set_has_injection_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatabaseExperimentMessage::clear_has_injection_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatabaseExperimentMessage::clear_injection_width() {
  injection_width_ = 0u;
  clear_has_injection_width();
}
inline ::google::protobuf::uint32 DatabaseExperimentMessage::injection_width() const {
  // @@protoc_insertion_point(field_get:DatabaseExperimentMessage.injection_width)
  return injection_width_;
}
inline void DatabaseExperimentMessage::set_injection_width(::google::protobuf::uint32 value) {
  set_has_injection_width();
  injection_width_ = value;
  // @@protoc_insertion_point(field_set:DatabaseExperimentMessage.injection_width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DatabaseCampaignMessage_RegisterInjectionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DatabaseCampaignMessage_RegisterInjectionMode>() {
  return ::DatabaseCampaignMessage_RegisterInjectionMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_DatabaseCampaignMessage_2eproto
