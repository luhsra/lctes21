// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TracePlugin.proto

#ifndef PROTOBUF_INCLUDED_TracePlugin_2eproto
#define PROTOBUF_INCLUDED_TracePlugin_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_TracePlugin_2eproto 

namespace protobuf_TracePlugin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_TracePlugin_2eproto
class Trace_Event;
class Trace_EventDefaultTypeInternal;
extern Trace_EventDefaultTypeInternal _Trace_Event_default_instance_;
class Trace_Event_Extended;
class Trace_Event_ExtendedDefaultTypeInternal;
extern Trace_Event_ExtendedDefaultTypeInternal _Trace_Event_Extended_default_instance_;
class Trace_Event_Extended_Registers;
class Trace_Event_Extended_RegistersDefaultTypeInternal;
extern Trace_Event_Extended_RegistersDefaultTypeInternal _Trace_Event_Extended_Registers_default_instance_;
class Trace_Event_Extended_Stack;
class Trace_Event_Extended_StackDefaultTypeInternal;
extern Trace_Event_Extended_StackDefaultTypeInternal _Trace_Event_Extended_Stack_default_instance_;
namespace google {
namespace protobuf {
template<> ::Trace_Event* Arena::CreateMaybeMessage<::Trace_Event>(Arena*);
template<> ::Trace_Event_Extended* Arena::CreateMaybeMessage<::Trace_Event_Extended>(Arena*);
template<> ::Trace_Event_Extended_Registers* Arena::CreateMaybeMessage<::Trace_Event_Extended_Registers>(Arena*);
template<> ::Trace_Event_Extended_Stack* Arena::CreateMaybeMessage<::Trace_Event_Extended_Stack>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Trace_Event_AccessType {
  Trace_Event_AccessType_READ = 1,
  Trace_Event_AccessType_WRITE = 2
};
bool Trace_Event_AccessType_IsValid(int value);
const Trace_Event_AccessType Trace_Event_AccessType_AccessType_MIN = Trace_Event_AccessType_READ;
const Trace_Event_AccessType Trace_Event_AccessType_AccessType_MAX = Trace_Event_AccessType_WRITE;
const int Trace_Event_AccessType_AccessType_ARRAYSIZE = Trace_Event_AccessType_AccessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Trace_Event_AccessType_descriptor();
inline const ::std::string& Trace_Event_AccessType_Name(Trace_Event_AccessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Trace_Event_AccessType_descriptor(), value);
}
inline bool Trace_Event_AccessType_Parse(
    const ::std::string& name, Trace_Event_AccessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Trace_Event_AccessType>(
    Trace_Event_AccessType_descriptor(), name, value);
}
// ===================================================================

class Trace_Event_Extended_Registers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trace_Event_Extended.Registers) */ {
 public:
  Trace_Event_Extended_Registers();
  virtual ~Trace_Event_Extended_Registers();

  Trace_Event_Extended_Registers(const Trace_Event_Extended_Registers& from);

  inline Trace_Event_Extended_Registers& operator=(const Trace_Event_Extended_Registers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trace_Event_Extended_Registers(Trace_Event_Extended_Registers&& from) noexcept
    : Trace_Event_Extended_Registers() {
    *this = ::std::move(from);
  }

  inline Trace_Event_Extended_Registers& operator=(Trace_Event_Extended_Registers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trace_Event_Extended_Registers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace_Event_Extended_Registers* internal_default_instance() {
    return reinterpret_cast<const Trace_Event_Extended_Registers*>(
               &_Trace_Event_Extended_Registers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Trace_Event_Extended_Registers* other);
  friend void swap(Trace_Event_Extended_Registers& a, Trace_Event_Extended_Registers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trace_Event_Extended_Registers* New() const final {
    return CreateMaybeMessage<Trace_Event_Extended_Registers>(NULL);
  }

  Trace_Event_Extended_Registers* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trace_Event_Extended_Registers>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trace_Event_Extended_Registers& from);
  void MergeFrom(const Trace_Event_Extended_Registers& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace_Event_Extended_Registers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 value_deref = 3;
  bool has_value_deref() const;
  void clear_value_deref();
  static const int kValueDerefFieldNumber = 3;
  ::google::protobuf::uint32 value_deref() const;
  void set_value_deref(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Trace_Event_Extended.Registers)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_value();
  void clear_has_value();
  void set_has_value_deref();
  void clear_has_value_deref();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 value_deref_;
  friend struct ::protobuf_TracePlugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trace_Event_Extended_Stack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trace_Event_Extended.Stack) */ {
 public:
  Trace_Event_Extended_Stack();
  virtual ~Trace_Event_Extended_Stack();

  Trace_Event_Extended_Stack(const Trace_Event_Extended_Stack& from);

  inline Trace_Event_Extended_Stack& operator=(const Trace_Event_Extended_Stack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trace_Event_Extended_Stack(Trace_Event_Extended_Stack&& from) noexcept
    : Trace_Event_Extended_Stack() {
    *this = ::std::move(from);
  }

  inline Trace_Event_Extended_Stack& operator=(Trace_Event_Extended_Stack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trace_Event_Extended_Stack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace_Event_Extended_Stack* internal_default_instance() {
    return reinterpret_cast<const Trace_Event_Extended_Stack*>(
               &_Trace_Event_Extended_Stack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Trace_Event_Extended_Stack* other);
  friend void swap(Trace_Event_Extended_Stack& a, Trace_Event_Extended_Stack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trace_Event_Extended_Stack* New() const final {
    return CreateMaybeMessage<Trace_Event_Extended_Stack>(NULL);
  }

  Trace_Event_Extended_Stack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trace_Event_Extended_Stack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trace_Event_Extended_Stack& from);
  void MergeFrom(const Trace_Event_Extended_Stack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace_Event_Extended_Stack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Trace_Event_Extended.Stack)
 private:
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 value_;
  friend struct ::protobuf_TracePlugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trace_Event_Extended : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trace_Event_Extended) */ {
 public:
  Trace_Event_Extended();
  virtual ~Trace_Event_Extended();

  Trace_Event_Extended(const Trace_Event_Extended& from);

  inline Trace_Event_Extended& operator=(const Trace_Event_Extended& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trace_Event_Extended(Trace_Event_Extended&& from) noexcept
    : Trace_Event_Extended() {
    *this = ::std::move(from);
  }

  inline Trace_Event_Extended& operator=(Trace_Event_Extended&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trace_Event_Extended& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace_Event_Extended* internal_default_instance() {
    return reinterpret_cast<const Trace_Event_Extended*>(
               &_Trace_Event_Extended_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Trace_Event_Extended* other);
  friend void swap(Trace_Event_Extended& a, Trace_Event_Extended& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trace_Event_Extended* New() const final {
    return CreateMaybeMessage<Trace_Event_Extended>(NULL);
  }

  Trace_Event_Extended* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trace_Event_Extended>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trace_Event_Extended& from);
  void MergeFrom(const Trace_Event_Extended& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace_Event_Extended* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Trace_Event_Extended_Registers Registers;
  typedef Trace_Event_Extended_Stack Stack;

  // accessors -------------------------------------------------------

  // repeated group Registers = 6 { ... };
  int registers_size() const;
  void clear_registers();
  static const int kRegistersFieldNumber = 6;
  ::Trace_Event_Extended_Registers* mutable_registers(int index);
  ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Registers >*
      mutable_registers();
  const ::Trace_Event_Extended_Registers& registers(int index) const;
  ::Trace_Event_Extended_Registers* add_registers();
  const ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Registers >&
      registers() const;

  // repeated group Stack = 7 { ... };
  int stack_size() const;
  void clear_stack();
  static const int kStackFieldNumber = 7;
  ::Trace_Event_Extended_Stack* mutable_stack(int index);
  ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Stack >*
      mutable_stack();
  const ::Trace_Event_Extended_Stack& stack(int index) const;
  ::Trace_Event_Extended_Stack* add_stack();
  const ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Stack >&
      stack() const;

  // optional uint64 data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  ::google::protobuf::uint64 data() const;
  void set_data(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Trace_Event_Extended)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Registers > registers_;
  ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Stack > stack_;
  ::google::protobuf::uint64 data_;
  friend struct ::protobuf_TracePlugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Trace_Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Trace_Event) */ {
 public:
  Trace_Event();
  virtual ~Trace_Event();

  Trace_Event(const Trace_Event& from);

  inline Trace_Event& operator=(const Trace_Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Trace_Event(Trace_Event&& from) noexcept
    : Trace_Event() {
    *this = ::std::move(from);
  }

  inline Trace_Event& operator=(Trace_Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Trace_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace_Event* internal_default_instance() {
    return reinterpret_cast<const Trace_Event*>(
               &_Trace_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Trace_Event* other);
  friend void swap(Trace_Event& a, Trace_Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Trace_Event* New() const final {
    return CreateMaybeMessage<Trace_Event>(NULL);
  }

  Trace_Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Trace_Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Trace_Event& from);
  void MergeFrom(const Trace_Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace_Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Trace_Event_AccessType AccessType;
  static const AccessType READ =
    Trace_Event_AccessType_READ;
  static const AccessType WRITE =
    Trace_Event_AccessType_WRITE;
  static inline bool AccessType_IsValid(int value) {
    return Trace_Event_AccessType_IsValid(value);
  }
  static const AccessType AccessType_MIN =
    Trace_Event_AccessType_AccessType_MIN;
  static const AccessType AccessType_MAX =
    Trace_Event_AccessType_AccessType_MAX;
  static const int AccessType_ARRAYSIZE =
    Trace_Event_AccessType_AccessType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AccessType_descriptor() {
    return Trace_Event_AccessType_descriptor();
  }
  static inline const ::std::string& AccessType_Name(AccessType value) {
    return Trace_Event_AccessType_Name(value);
  }
  static inline bool AccessType_Parse(const ::std::string& name,
      AccessType* value) {
    return Trace_Event_AccessType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Trace_Event_Extended trace_ext = 5;
  bool has_trace_ext() const;
  void clear_trace_ext();
  static const int kTraceExtFieldNumber = 5;
  private:
  const ::Trace_Event_Extended& _internal_trace_ext() const;
  public:
  const ::Trace_Event_Extended& trace_ext() const;
  ::Trace_Event_Extended* release_trace_ext();
  ::Trace_Event_Extended* mutable_trace_ext();
  void set_allocated_trace_ext(::Trace_Event_Extended* trace_ext);

  // required uint64 ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint64 ip() const;
  void set_ip(::google::protobuf::uint64 value);

  // optional uint64 memaddr = 2;
  bool has_memaddr() const;
  void clear_memaddr();
  static const int kMemaddrFieldNumber = 2;
  ::google::protobuf::uint64 memaddr() const;
  void set_memaddr(::google::protobuf::uint64 value);

  // optional int64 time_delta = 6;
  bool has_time_delta() const;
  void clear_time_delta();
  static const int kTimeDeltaFieldNumber = 6;
  ::google::protobuf::int64 time_delta() const;
  void set_time_delta(::google::protobuf::int64 value);

  // optional uint32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional .Trace_Event.AccessType accesstype = 4;
  bool has_accesstype() const;
  void clear_accesstype();
  static const int kAccesstypeFieldNumber = 4;
  ::Trace_Event_AccessType accesstype() const;
  void set_accesstype(::Trace_Event_AccessType value);

  // @@protoc_insertion_point(class_scope:Trace_Event)
 private:
  void set_has_ip();
  void clear_has_ip();
  void set_has_time_delta();
  void clear_has_time_delta();
  void set_has_memaddr();
  void clear_has_memaddr();
  void set_has_width();
  void clear_has_width();
  void set_has_accesstype();
  void clear_has_accesstype();
  void set_has_trace_ext();
  void clear_has_trace_ext();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Trace_Event_Extended* trace_ext_;
  ::google::protobuf::uint64 ip_;
  ::google::protobuf::uint64 memaddr_;
  ::google::protobuf::int64 time_delta_;
  ::google::protobuf::uint32 width_;
  int accesstype_;
  friend struct ::protobuf_TracePlugin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Trace_Event_Extended_Registers

// required uint32 id = 1;
inline bool Trace_Event_Extended_Registers::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trace_Event_Extended_Registers::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trace_Event_Extended_Registers::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Trace_Event_Extended_Registers::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Trace_Event_Extended_Registers::id() const {
  // @@protoc_insertion_point(field_get:Trace_Event_Extended.Registers.id)
  return id_;
}
inline void Trace_Event_Extended_Registers::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event_Extended.Registers.id)
}

// optional uint64 value = 2;
inline bool Trace_Event_Extended_Registers::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trace_Event_Extended_Registers::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trace_Event_Extended_Registers::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trace_Event_Extended_Registers::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 Trace_Event_Extended_Registers::value() const {
  // @@protoc_insertion_point(field_get:Trace_Event_Extended.Registers.value)
  return value_;
}
inline void Trace_Event_Extended_Registers::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event_Extended.Registers.value)
}

// optional uint32 value_deref = 3;
inline bool Trace_Event_Extended_Registers::has_value_deref() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Trace_Event_Extended_Registers::set_has_value_deref() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Trace_Event_Extended_Registers::clear_has_value_deref() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Trace_Event_Extended_Registers::clear_value_deref() {
  value_deref_ = 0u;
  clear_has_value_deref();
}
inline ::google::protobuf::uint32 Trace_Event_Extended_Registers::value_deref() const {
  // @@protoc_insertion_point(field_get:Trace_Event_Extended.Registers.value_deref)
  return value_deref_;
}
inline void Trace_Event_Extended_Registers::set_value_deref(::google::protobuf::uint32 value) {
  set_has_value_deref();
  value_deref_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event_Extended.Registers.value_deref)
}

// -------------------------------------------------------------------

// Trace_Event_Extended_Stack

// required uint32 value = 1;
inline bool Trace_Event_Extended_Stack::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trace_Event_Extended_Stack::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trace_Event_Extended_Stack::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trace_Event_Extended_Stack::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 Trace_Event_Extended_Stack::value() const {
  // @@protoc_insertion_point(field_get:Trace_Event_Extended.Stack.value)
  return value_;
}
inline void Trace_Event_Extended_Stack::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event_Extended.Stack.value)
}

// -------------------------------------------------------------------

// Trace_Event_Extended

// optional uint64 data = 5;
inline bool Trace_Event_Extended::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trace_Event_Extended::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trace_Event_Extended::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trace_Event_Extended::clear_data() {
  data_ = GOOGLE_ULONGLONG(0);
  clear_has_data();
}
inline ::google::protobuf::uint64 Trace_Event_Extended::data() const {
  // @@protoc_insertion_point(field_get:Trace_Event_Extended.data)
  return data_;
}
inline void Trace_Event_Extended::set_data(::google::protobuf::uint64 value) {
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event_Extended.data)
}

// repeated group Registers = 6 { ... };
inline int Trace_Event_Extended::registers_size() const {
  return registers_.size();
}
inline void Trace_Event_Extended::clear_registers() {
  registers_.Clear();
}
inline ::Trace_Event_Extended_Registers* Trace_Event_Extended::mutable_registers(int index) {
  // @@protoc_insertion_point(field_mutable:Trace_Event_Extended.registers)
  return registers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Registers >*
Trace_Event_Extended::mutable_registers() {
  // @@protoc_insertion_point(field_mutable_list:Trace_Event_Extended.registers)
  return &registers_;
}
inline const ::Trace_Event_Extended_Registers& Trace_Event_Extended::registers(int index) const {
  // @@protoc_insertion_point(field_get:Trace_Event_Extended.registers)
  return registers_.Get(index);
}
inline ::Trace_Event_Extended_Registers* Trace_Event_Extended::add_registers() {
  // @@protoc_insertion_point(field_add:Trace_Event_Extended.registers)
  return registers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Registers >&
Trace_Event_Extended::registers() const {
  // @@protoc_insertion_point(field_list:Trace_Event_Extended.registers)
  return registers_;
}

// repeated group Stack = 7 { ... };
inline int Trace_Event_Extended::stack_size() const {
  return stack_.size();
}
inline void Trace_Event_Extended::clear_stack() {
  stack_.Clear();
}
inline ::Trace_Event_Extended_Stack* Trace_Event_Extended::mutable_stack(int index) {
  // @@protoc_insertion_point(field_mutable:Trace_Event_Extended.stack)
  return stack_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Stack >*
Trace_Event_Extended::mutable_stack() {
  // @@protoc_insertion_point(field_mutable_list:Trace_Event_Extended.stack)
  return &stack_;
}
inline const ::Trace_Event_Extended_Stack& Trace_Event_Extended::stack(int index) const {
  // @@protoc_insertion_point(field_get:Trace_Event_Extended.stack)
  return stack_.Get(index);
}
inline ::Trace_Event_Extended_Stack* Trace_Event_Extended::add_stack() {
  // @@protoc_insertion_point(field_add:Trace_Event_Extended.stack)
  return stack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Trace_Event_Extended_Stack >&
Trace_Event_Extended::stack() const {
  // @@protoc_insertion_point(field_list:Trace_Event_Extended.stack)
  return stack_;
}

// -------------------------------------------------------------------

// Trace_Event

// required uint64 ip = 1;
inline bool Trace_Event::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Trace_Event::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Trace_Event::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Trace_Event::clear_ip() {
  ip_ = GOOGLE_ULONGLONG(0);
  clear_has_ip();
}
inline ::google::protobuf::uint64 Trace_Event::ip() const {
  // @@protoc_insertion_point(field_get:Trace_Event.ip)
  return ip_;
}
inline void Trace_Event::set_ip(::google::protobuf::uint64 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event.ip)
}

// optional int64 time_delta = 6;
inline bool Trace_Event::has_time_delta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Trace_Event::set_has_time_delta() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Trace_Event::clear_has_time_delta() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Trace_Event::clear_time_delta() {
  time_delta_ = GOOGLE_LONGLONG(0);
  clear_has_time_delta();
}
inline ::google::protobuf::int64 Trace_Event::time_delta() const {
  // @@protoc_insertion_point(field_get:Trace_Event.time_delta)
  return time_delta_;
}
inline void Trace_Event::set_time_delta(::google::protobuf::int64 value) {
  set_has_time_delta();
  time_delta_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event.time_delta)
}

// optional uint64 memaddr = 2;
inline bool Trace_Event::has_memaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Trace_Event::set_has_memaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Trace_Event::clear_has_memaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Trace_Event::clear_memaddr() {
  memaddr_ = GOOGLE_ULONGLONG(0);
  clear_has_memaddr();
}
inline ::google::protobuf::uint64 Trace_Event::memaddr() const {
  // @@protoc_insertion_point(field_get:Trace_Event.memaddr)
  return memaddr_;
}
inline void Trace_Event::set_memaddr(::google::protobuf::uint64 value) {
  set_has_memaddr();
  memaddr_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event.memaddr)
}

// optional uint32 width = 3;
inline bool Trace_Event::has_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Trace_Event::set_has_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Trace_Event::clear_has_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Trace_Event::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Trace_Event::width() const {
  // @@protoc_insertion_point(field_get:Trace_Event.width)
  return width_;
}
inline void Trace_Event::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event.width)
}

// optional .Trace_Event.AccessType accesstype = 4;
inline bool Trace_Event::has_accesstype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Trace_Event::set_has_accesstype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Trace_Event::clear_has_accesstype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Trace_Event::clear_accesstype() {
  accesstype_ = 1;
  clear_has_accesstype();
}
inline ::Trace_Event_AccessType Trace_Event::accesstype() const {
  // @@protoc_insertion_point(field_get:Trace_Event.accesstype)
  return static_cast< ::Trace_Event_AccessType >(accesstype_);
}
inline void Trace_Event::set_accesstype(::Trace_Event_AccessType value) {
  assert(::Trace_Event_AccessType_IsValid(value));
  set_has_accesstype();
  accesstype_ = value;
  // @@protoc_insertion_point(field_set:Trace_Event.accesstype)
}

// optional .Trace_Event_Extended trace_ext = 5;
inline bool Trace_Event::has_trace_ext() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Trace_Event::set_has_trace_ext() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Trace_Event::clear_has_trace_ext() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Trace_Event::clear_trace_ext() {
  if (trace_ext_ != NULL) trace_ext_->Clear();
  clear_has_trace_ext();
}
inline const ::Trace_Event_Extended& Trace_Event::_internal_trace_ext() const {
  return *trace_ext_;
}
inline const ::Trace_Event_Extended& Trace_Event::trace_ext() const {
  const ::Trace_Event_Extended* p = trace_ext_;
  // @@protoc_insertion_point(field_get:Trace_Event.trace_ext)
  return p != NULL ? *p : *reinterpret_cast<const ::Trace_Event_Extended*>(
      &::_Trace_Event_Extended_default_instance_);
}
inline ::Trace_Event_Extended* Trace_Event::release_trace_ext() {
  // @@protoc_insertion_point(field_release:Trace_Event.trace_ext)
  clear_has_trace_ext();
  ::Trace_Event_Extended* temp = trace_ext_;
  trace_ext_ = NULL;
  return temp;
}
inline ::Trace_Event_Extended* Trace_Event::mutable_trace_ext() {
  set_has_trace_ext();
  if (trace_ext_ == NULL) {
    auto* p = CreateMaybeMessage<::Trace_Event_Extended>(GetArenaNoVirtual());
    trace_ext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Trace_Event.trace_ext)
  return trace_ext_;
}
inline void Trace_Event::set_allocated_trace_ext(::Trace_Event_Extended* trace_ext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete trace_ext_;
  }
  if (trace_ext) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      trace_ext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, trace_ext, submessage_arena);
    }
    set_has_trace_ext();
  } else {
    clear_has_trace_ext();
  }
  trace_ext_ = trace_ext;
  // @@protoc_insertion_point(field_set_allocated:Trace_Event.trace_ext)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Trace_Event_AccessType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Trace_Event_AccessType>() {
  return ::Trace_Event_AccessType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_TracePlugin_2eproto
